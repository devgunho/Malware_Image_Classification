import hashlib
import math
import os
import sys

import file_open_easygui as fopen

from Crypto.Cipher import AES
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import uic

# import .ui file
# .ui file must be located in the same directory as the Python code file.
form_class = uic.loadUiType("MainWindow.ui")[0]


def getBinaryData(filePath):
    binaryValues = []
    file = open(filePath, "rb")
    data = file.read(1)
    while data != b"":
        try:
            binaryValues.append(ord(data))
        except TypeError:
            pass
        data = file.read(1)
    return binaryValues


def makeEncFile(filePath, fileName):
    password = "i am a key123"
    key = hashlib.sha256(password.encode('utf-8')).digest()
    iv = 'initialvector123'
    encryptor = AES.new(key, AES.MODE_CBC, iv)

    if((os.path.isdir('./Encryption')) == False):
        os.mkdir('./Encryption')
    out_filepath = './Encryption/' + fileName + '.enc'
    with open(filePath, "rb") as readFile:
        with open(out_filepath, "wb") as writefile:
            chunkSize = 65536
            while True:
                chunk = readFile.read(chunkSize)
                if len(chunk) == 0:
                    break
                elif len(chunk) % 16 != 0:
                    chunk += b' ' * (16 - len(chunk) % 16)
                writefile.write(encryptor.encrypt(chunk))


class WindowClass(QtWidgets.QMainWindow, form_class):   # GUI Class Define
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.fileOpen_Btn.clicked.connect(self.fileOpen_Btn_function)
        self.encryption_Btn.clicked.connect(self.encryption_Btn_function)
        self.imgConv_Btn.clicked.connect(self.imgConv_Btn_function)

    def fileOpen_Btn_function(self):
        print("[*] fileOpen_Btn_function")
        dirPath = fopen.OpenWinFileExplorer()
        print(" directory path: ", dirPath)
        self.filePath.setText(dirPath)

    def encryption_Btn_function(self):
        print("[*] encryption_Btn_function")
        fileCnt = 0
        saveFileCnt = 0
        for(path, dir, files) in os.walk(self.filePath.text()):
            for filename in files:
                ext = os.path.splitext(filename)[-1]
                fileCnt += 1
                print("[%d] %s\%s" % (fileCnt, path, filename))
                fileSize = os.path.getsize(path+'/'+filename)

                # 1MB(1024KB) ~ 200MB
                if((fileSize >= 1048576) & (fileSize <= 1048576*200)):
                    saveFileCnt += 1
                    makeEncFile(path + '/' + filename, filename)
                    binaryEncData = getBinaryData(
                        './Encryption/' + filename + '.enc')
                    print("  size: ", fileSize, "/ sqrt: ",
                          (int)(math.sqrt(fileSize)))
                    grayScaleImg = Image.new(
                        'L', ((int)(math.sqrt(fileSize))+1, (int)(math.sqrt(fileSize))+1))
                    grayScaleImg.putdata(binaryEncData)
                    # grayScaleImgName = filename + ".png"
                    grayScaleImgName = "Encryption" + \
                        str(saveFileCnt) + "-" + str(fileSize) + ext + ".png"
                    grayScaleImg.save(grayScaleImgName)
        print("[*] encryption_Btn_function END")

    def imgConv_Btn_function(self):
        print("[*] imgConv_Btn_function")
        fileCnt = 0
        saveFileCnt = 0
        for(path, dir, files) in os.walk(self.filePath.text()):
            for filename in files:
                ext = os.path.splitext(filename)[-1]
                fileCnt += 1
                print("[%d] %s\%s" % (fileCnt, path, filename))
                fileSize = os.path.getsize(path+'/'+filename)

                # 1MB(1024KB) ~ 200MB
                if((fileSize >= 1048576) & (fileSize <= 1048576*200)):
                    saveFileCnt += 1
                    binaryData = getBinaryData(path+'/'+filename)
                    print("  size: ", fileSize, "/ sqrt: ",
                          (int)(math.sqrt(fileSize)))
                    grayScaleImg = Image.new(
                        'L', ((int)(math.sqrt(fileSize))+1, (int)(math.sqrt(fileSize))+1))
                    grayScaleImg.putdata(binaryData)
                    # grayScaleImgName = filename + ".png"
                    grayScaleImgName = "Normal" + \
                        str(saveFileCnt) + "-" + str(fileSize) + ext + ".png"
                    grayScaleImg.save(grayScaleImgName)
        print("[*] imgConv_Btn_function END")


# QApplication : Run App
app = QtWidgets.QApplication(sys.argv)

# Create an instance of WindowClass
myWindow = WindowClass()

# Showing the program screen
myWindow.show()

# Code for entering a program into an event loop (which activates the program)
app.exec_()
